Kubernets installation
-------------------------

Go to the root user
---------------------

apt update

apt install docker.io -y

docker --version

systemctl start docker

systemctl status docker

apt update && apt install -y apt-transport-https ca-certificates curl

curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

apt update

apt install -y kubelet kubeadm kubectl

kubeadm version 

swapoff -a

kubeadm init
------------------------------------
swapoff -a

vi /etc/fstab

sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

cat <<EOF | sudo tee /etc/sysctl.d/99-kubernets-cri.conf
net.bridge.bridge-nf-call-iptables   =1
nwt.ipv4.ip_forward                             =1
net.bridge.bridge-nf-call-ip6tables =1
EOF

sudo sysctl --system

apt update

apt install -y containerd

mkdir -p /etc/containerd

nano /etc/containerd/config.toml

#at the end of this section
[plugins."io.containerd.grpc.v1.cri".containerd.runtaimes.runc]

#add these two lines, indentation matters.
[plugin."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
   SystemdCgroup = true

systemctl restart containerd

##install k*s packages - kubeadm, kubelet and kubectl
## add google's apt repository gpg kry
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
 
##add the K8S apt repository
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list

deb https://apt.kubernetes.io/ kubernetes-xenial main

EOF

## update the package list and use apt-cache policy to inspect version available in the repository
apt-get update
apt-cache policy kubelet | head -n 20

## install the required package, if needed we can request a specific version.
VERSION=1.20.1-00
sudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION
sudo apt-mark hold kubelet kubeadm kubectl containerd

## cheack status kubelet service
systemctl status kubelet.service
systemctl status containerd.service

## enabling
systemctl enable kubelet.service
systemctl enable containerd.service

## create our k8s cluster
wget  https://docs.projectcalico.org/manifests/calico.yaml 

## show calico.yaml
nano calico.yaml

## generate default kubeadm init config. file
kubeadm config print init-defaults | tee ClusterConfiguration.yaml

##set values
sed -i 's/  advertiseAddress: 1.2.3.4/  advertiseAddress: 10.87.66.203/' ClusterConfiguration.yaml


sed -i 's/  criSocket: \/var\/run\/dockershim\.sock/  criSocket: \/run\/containerd\/containerd\.sock/' ClusterConfiguration.yaml

cat <<EOF | cat >> ClusterConfiguration.yaml
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
cgroupDriver: systemd
EOF


## change version v1.10.0 to v1.10.1
nano ClusterConfiguration.yaml


## init the kubeadm
sudo kubeadm init \
    --config=ClusterConfiguration.yaml \
    --cri-socket /run/containerd/containerd.sock

kubeadm init

## it comes any error type kubeadm reset

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

## deploy yaml file for your pod network
kubectl apply -f calico.yaml

## look for the all the system pods
kubectl get pods --all-namespaces


## watch the pods
kubectl get pods --all-namespaces --watch

## check status of kubelet
systemctl status kubelet.service 

## check the static pod manifests on thecontrol plane node
ls /etc/kubernetes/manifests

## look at api server and etcd's manifest
sudo more /etc/kubernetes/manifests/etcd.yaml
sudo more /etc/kubernetes/manifests/kube-apiserver.yaml

## check kubeconfig files
ls /etc/kubernetes


------------------------------------------------k8s workernode joining to the masternode
------------------------------------------------
------------------------------------------------swapoff -a
nano /etc/fstab

## install container runtaime - containerd
sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
 br_netfilter
EOF

## setup required sysctl params
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernets-cri.conf
net.bridge.bridge-nf-call-iptables   =1
nwt.ipv4.ip_forward                             =1
net.bridge.bridge-nf-call-ip6tables =1
EOF

## apply sysctl params without reboot
sudo sysctl --system

## install containerd

apt update

apt install -y containerd

## configure containerd

mkdir -p /etc/containerd

sudo containerd config default | sudo tee /etc/containerd/config.toml

nano /etc/containerd/config.toml

# at the end of this section
[plugins."io.containerd.grpc.v1.cri".containerd.runtaimes.runc]

# add these two lines, indentation matters.
[plugin."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
   SystemdCgroup = true

## restart the containerd
systemctl restart containerd

##install k8s packages - kubeadm, kubelet and kubectl
## add google's apt repository gpg kry
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
 
##add the K8S apt repository
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list

deb https://apt.kubernetes.io/ kubernetes-xenial main

EOF

## update the package list and use apt-cache policy to inspect version available in the repository
apt-get update
apt-cache policy kubelet | head -n 20

## install the required package, if needed we can request a specific version.
VERSION=1.20.1-00
sudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION
sudo apt-mark hold kubelet kubeadm kubectl containerd

## cheack status kubelet service
systemctl status kubelet.service
systemctl status containerd.service

## enabling
systemctl enable kubelet.service
systemctl enable containerd.service

## logout of worker node
exit

## go to the control plane node
kubeadm token list

## generate new token
kubeadm token create

## control plane node can find the CA cert hash.
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outfrom der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'


## get token and paste to worker node
kubeadm token create --print-join-command
